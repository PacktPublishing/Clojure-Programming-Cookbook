;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name monet.canvas, :imports nil, :requires {core monet.core, monet.core monet.core}, :uses nil, :defs {begin-path {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 18, :column 7, :end-line 18, :end-column 17, :arglists (quote ([ctx])), :doc "Starts a new path by resetting the list of sub-paths.\n   Call this method when you want to create a new path."}, :name monet.canvas/begin-path, :variadic false, :file "out/monet/canvas.cljs", :end-column 17, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx])), :doc "Starts a new path by resetting the list of sub-paths.\n   Call this method when you want to create a new path."}, stop-updating {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 372, :column 7, :end-line 372, :end-column 20, :arglists (quote ([mc]))}, :name monet.canvas/stop-updating, :variadic false, :file "out/monet/canvas.cljs", :end-column 20, :method-params ([mc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 372, :end-line 372, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mc]))}, entity {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 319, :column 7, :end-line 319, :end-column 13, :arglists (quote ([v update draw]))}, :name monet.canvas/entity, :variadic false, :file "out/monet/canvas.cljs", :end-column 13, :method-params ([v update draw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 3, :fn-var true, :arglists (quote ([v update draw]))}, rounded-rect {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 280, :column 7, :end-line 280, :end-column 19, :arglists (quote ([ctx {:keys [x y w h r]}]))}, :name monet.canvas/rounded-rect, :variadic false, :file "out/monet/canvas.cljs", :end-column 19, :method-params ([ctx p__7348]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 280, :end-line 280, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx {:keys [x y w h r]}]))}, composition-operation {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 214, :column 7, :end-line 214, :end-column 28, :arglists (quote ([ctx operation])), :doc "With Global Alpha applied this sets how shapes and images are drawn\n   onto the existing bitmap. Possible values (as string or keyword):\n   source-atop, source-in, source-out, source-over (default),\n   destination-atop, destination-in, destination-out, destination-over,\n   lighter, darker, copy, xor"}, :name monet.canvas/composition-operation, :variadic false, :file "out/monet/canvas.cljs", :end-column 28, :method-params ([ctx operation]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx operation])), :doc "With Global Alpha applied this sets how shapes and images are drawn\n   onto the existing bitmap. Possible values (as string or keyword):\n   source-atop, source-in, source-out, source-over (default),\n   destination-atop, destination-in, destination-out, destination-over,\n   lighter, darker, copy, xor"}, clear-rect {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 97, :column 7, :end-line 97, :end-column 17, :arglists (quote ([ctx {:keys [x y w h]}])), :doc "Sets all pixels in the rectangle defined by starting point (x, y)\n   and size (w, h) to transparent black."}, :name monet.canvas/clear-rect, :variadic false, :file "out/monet/canvas.cljs", :end-column 17, :method-params ([ctx p__7278]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx {:keys [x y w h]}])), :doc "Sets all pixels in the rectangle defined by starting point (x, y)\n   and size (w, h) to transparent black."}, text {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 149, :column 7, :end-line 149, :end-column 11, :arglists (quote ([ctx {:keys [text x y]}])), :doc "Paints the given text at a starting point at (x, y), using the\n   current fill style."}, :name monet.canvas/text, :variadic false, :file "out/monet/canvas.cljs", :end-column 11, :method-params ([ctx p__7308]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx {:keys [text x y]}])), :doc "Paints the given text at a starting point at (x, y), using the\n   current fill style."}, attr {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 324, :column 8, :end-line 324, :end-column 12, :private true, :arglists (quote ([e a]))}, :private true, :name monet.canvas/attr, :variadic false, :file "out/monet/canvas.cljs", :end-column 12, :method-params ([e a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 324, :end-line 324, :max-fixed-arity 2, :fn-var true, :arglists (quote ([e a]))}, bezier-curve-to {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 272, :column 7, :end-line 272, :end-column 22, :arglists (quote ([ctx cp1x cp1y cp2x cp2y x y] [ctx {:keys [cp1x cp1y cp2x cp2y x y]}])), :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([ctx cp1x cp1y cp2x cp2y x y] [ctx {:keys [cp1x cp1y cp2x cp2y x y]}]), :arglists ([ctx cp1x cp1y cp2x cp2y x y] [ctx {:keys [cp1x cp1y cp2x cp2y x y]}]), :arglists-meta (nil nil)}}, :name monet.canvas/bezier-curve-to, :variadic false, :file "out/monet/canvas.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([ctx cp1x cp1y cp2x cp2y x y] [ctx {:keys [cp1x cp1y cp2x cp2y x y]}]), :arglists ([ctx cp1x cp1y cp2x cp2y x y] [ctx {:keys [cp1x cp1y cp2x cp2y x y]}]), :arglists-meta (nil nil)}, :method-params ([ctx cp1x cp1y cp2x cp2y x y] [ctx {:keys [cp1x cp1y cp2x cp2y x y]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 7, :fn-var true, :arglists ([ctx cp1x cp1y cp2x cp2y x y] [ctx {:keys [cp1x cp1y cp2x cp2y x y]}])}, text-baseline {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 232, :column 7, :end-line 232, :end-column 20, :arglists (quote ([ctx alignment])), :doc "Sets the text baseline attribute. Possible values (specified\n   as a string or keyword): top, hanging, middle, alphabetic (default),\n   ideographic, bottom"}, :name monet.canvas/text-baseline, :variadic false, :file "out/monet/canvas.cljs", :end-column 20, :method-params ([ctx alignment]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx alignment])), :doc "Sets the text baseline attribute. Possible values (specified\n   as a string or keyword): top, hanging, middle, alphabetic (default),\n   ideographic, bottom"}, font-style {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 156, :column 7, :end-line 156, :end-column 17, :arglists (quote ([ctx font])), :doc "Sets the font. Default value 10px sans-serif."}, :name monet.canvas/font-style, :variadic false, :file "out/monet/canvas.cljs", :end-column 17, :method-params ([ctx font]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx font])), :doc "Sets the font. Default value 10px sans-serif."}, quadratic-curve-to {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 264, :column 7, :end-line 264, :end-column 25, :arglists (quote ([ctx cpx cpy x y] [ctx {:keys [cpx cpy x y]}])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([ctx cpx cpy x y] [ctx {:keys [cpx cpy x y]}]), :arglists ([ctx cpx cpy x y] [ctx {:keys [cpx cpy x y]}]), :arglists-meta (nil nil)}}, :name monet.canvas/quadratic-curve-to, :variadic false, :file "out/monet/canvas.cljs", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([ctx cpx cpy x y] [ctx {:keys [cpx cpy x y]}]), :arglists ([ctx cpx cpy x y] [ctx {:keys [cpx cpy x y]}]), :arglists-meta (nil nil)}, :method-params ([ctx cpx cpy x y] [ctx {:keys [cpx cpy x y]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 5, :fn-var true, :arglists ([ctx cpx cpy x y] [ctx {:keys [cpx cpy x y]}])}, add-entity {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 300, :column 7, :end-line 300, :end-column 17, :arglists (quote ([mc k ent]))}, :name monet.canvas/add-entity, :variadic false, :file "out/monet/canvas.cljs", :end-column 17, :method-params ([mc k ent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 300, :end-line 300, :max-fixed-arity 3, :fn-var true, :arglists (quote ([mc k ent]))}, stroke {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 85, :column 7, :end-line 85, :end-column 13, :arglists (quote ([ctx])), :doc "Strokes the subpaths with the current stroke style."}, :name monet.canvas/stroke, :variadic false, :file "out/monet/canvas.cljs", :end-column 13, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx])), :doc "Strokes the subpaths with the current stroke style."}, clip {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 91, :column 7, :end-line 91, :end-column 11, :arglists (quote ([ctx])), :doc "Further constrains the clipping region to the current path."}, :name monet.canvas/clip, :variadic false, :file "out/monet/canvas.cljs", :end-column 11, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx])), :doc "Further constrains the clipping region to the current path."}, transform {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 65, :column 7, :end-line 65, :end-column 16, :arglists (quote ([ctx m11 m12 m21 m22 dx dy] [ctx {:keys [m11 m12 m21 m22 dx dy]}])), :doc "Multiplies a custom transformation matrix to the existing\n   HTML5 canvas transformation according to the follow convention:\n\n   [ x']   [ m11 m21 dx ] [ x ]\n   [ y'] = [ m12 m22 dy ] [ y ]\n   [ 1 ]   [ 0   0   1  ] [ 1 ]", :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([ctx m11 m12 m21 m22 dx dy] [ctx {:keys [m11 m12 m21 m22 dx dy]}]), :arglists ([ctx m11 m12 m21 m22 dx dy] [ctx {:keys [m11 m12 m21 m22 dx dy]}]), :arglists-meta (nil nil)}}, :name monet.canvas/transform, :variadic false, :file "out/monet/canvas.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([ctx m11 m12 m21 m22 dx dy] [ctx {:keys [m11 m12 m21 m22 dx dy]}]), :arglists ([ctx m11 m12 m21 m22 dx dy] [ctx {:keys [m11 m12 m21 m22 dx dy]}]), :arglists-meta (nil nil)}, :method-params ([ctx m11 m12 m21 m22 dx dy] [ctx {:keys [m11 m12 m21 m22 dx dy]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 7, :fn-var true, :arglists ([ctx m11 m12 m21 m22 dx dy] [ctx {:keys [m11 m12 m21 m22 dx dy]}]), :doc "Multiplies a custom transformation matrix to the existing\n   HTML5 canvas transformation according to the follow convention:\n\n   [ x']   [ m11 m21 dx ] [ x ]\n   [ y'] = [ m12 m22 dy ] [ y ]\n   [ 1 ]   [ 0   0   1  ] [ 1 ]"}, stroke-join {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 187, :column 7, :end-line 187, :end-column 18, :arglists (quote ([ctx join])), :doc "Can be set, to change the line join style. Possible values (as string\n   or keyword): bevel, round, and miter. Other values are ignored."}, :name monet.canvas/stroke-join, :variadic false, :file "out/monet/canvas.cljs", :end-column 18, :method-params ([ctx join]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx join])), :doc "Can be set, to change the line join style. Possible values (as string\n   or keyword): bevel, round, and miter. Other values are ignored."}, restart {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 374, :column 7, :end-line 374, :end-column 14, :arglists (quote ([mc]))}, :name monet.canvas/restart, :variadic false, :file "out/monet/canvas.cljs", :end-column 14, :method-params ([mc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 374, :end-line 374, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mc]))}, arc {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 119, :column 7, :end-line 119, :end-column 10, :arglists (quote ([ctx {:keys [x y r start-angle end-angle counter-clockwise?]}])), :doc "Draws an arc at position (x, y) with radius r, beginning at start-angle,\n   finishing at end-angle, in the direction specified."}, :name monet.canvas/arc, :variadic false, :file "out/monet/canvas.cljs", :end-column 10, :method-params ([ctx p__7293]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx {:keys [x y r start-angle end-angle counter-clockwise?]}])), :doc "Draws an arc at position (x, y) with radius r, beginning at start-angle,\n   finishing at end-angle, in the direction specified."}, remove-entity {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 303, :column 7, :end-line 303, :end-column 20, :arglists (quote ([mc k]))}, :name monet.canvas/remove-entity, :variadic false, :file "out/monet/canvas.cljs", :end-column 20, :method-params ([mc k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 303, :end-line 303, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mc k]))}, text-align {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 224, :column 7, :end-line 224, :end-column 17, :arglists (quote ([ctx alignment])), :doc "Sets the text alignment attribute. Possible values (specified\n   as a string or keyword): start (default), end, left, right or\n   center."}, :name monet.canvas/text-align, :variadic false, :file "out/monet/canvas.cljs", :end-column 17, :method-params ([ctx alignment]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx alignment])), :doc "Sets the text alignment attribute. Possible values (specified\n   as a string or keyword): start (default), end, left, right or\n   center."}, stroke-style {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 168, :column 7, :end-line 168, :end-column 19, :arglists (quote ([ctx color])), :doc "Color or style to use for the lines around shapes. Default #000 (black)."}, :name monet.canvas/stroke-style, :variadic false, :file "out/monet/canvas.cljs", :end-column 19, :method-params ([ctx color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx color])), :doc "Color or style to use for the lines around shapes. Default #000 (black)."}, close-path {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 25, :column 7, :end-line 25, :end-column 17, :arglists (quote ([ctx])), :doc "Tries to draw a straight line from the current point to the start.\n   If the shape has already been closed or has only one point, this\n   function does nothing."}, :name monet.canvas/close-path, :variadic false, :file "out/monet/canvas.cljs", :end-column 17, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx])), :doc "Tries to draw a straight line from the current point to the start.\n   If the shape has already been closed or has only one point, this\n   function does nothing."}, init {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 365, :column 7, :end-line 365, :end-column 11, :arglists (quote ([canvas & [context-type]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(canvas [context-type])], :arglists ([canvas & [context-type]]), :arglists-meta (nil)}}, :name monet.canvas/init, :variadic true, :file "out/monet/canvas.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(canvas [context-type])], :arglists ([canvas & [context-type]]), :arglists-meta (nil)}, :method-params [(canvas [context-type])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 365, :end-line 365, :max-fixed-arity 1, :fn-var true, :arglists ([canvas & [context-type]])}, draw-loop {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 327, :column 7, :end-line 327, :end-column 16, :arglists (quote ([{:keys [canvas updating? ctx active entities last-frame-time], :as mc}]))}, :name monet.canvas/draw-loop, :variadic false, :file "out/monet/canvas.cljs", :end-column 16, :method-params ([p__7380]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 327, :end-line 327, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [canvas updating? ctx active entities last-frame-time], :as mc}]))}, scale {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 53, :column 7, :end-line 53, :end-column 12, :arglists (quote ([ctx x y])), :doc "Scales the context by a floating-point factor in each direction"}, :name monet.canvas/scale, :variadic false, :file "out/monet/canvas.cljs", :end-column 12, :method-params ([ctx x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ctx x y])), :doc "Scales the context by a floating-point factor in each direction"}, restore {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 40, :column 7, :end-line 40, :end-column 14, :arglists (quote ([ctx])), :doc "Restores the drawing style state to the last element on the 'state stack'\n   saved by save."}, :name monet.canvas/restore, :variadic false, :file "out/monet/canvas.cljs", :end-column 14, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx])), :doc "Restores the drawing style state to the last element on the 'state stack'\n   saved by save."}, move-to {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 194, :column 7, :end-line 194, :end-column 14, :arglists (quote ([ctx x y])), :doc "Moves the starting point of a new subpath to the (x, y) coordinates."}, :name monet.canvas/move-to, :variadic false, :file "out/monet/canvas.cljs", :end-column 14, :method-params ([ctx x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ctx x y])), :doc "Moves the starting point of a new subpath to the (x, y) coordinates."}, fill {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 79, :column 7, :end-line 79, :end-column 11, :arglists (quote ([ctx])), :doc "Fills the subpaths with the current fill style."}, :name monet.canvas/fill, :variadic false, :file "out/monet/canvas.cljs", :end-column 11, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx])), :doc "Fills the subpaths with the current fill style."}, circle {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 140, :column 7, :end-line 140, :end-column 13, :arglists (quote ([ctx {:keys [x y r]}])), :doc "Draws a circle at position (x, y) with radius r"}, :name monet.canvas/circle, :variadic false, :file "out/monet/canvas.cljs", :end-column 13, :method-params ([ctx p__7303]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx {:keys [x y r]}])), :doc "Draws a circle at position (x, y) with radius r"}, line-to {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 200, :column 7, :end-line 200, :end-column 14, :arglists (quote ([ctx x y])), :doc "Connects the last point in the subpath to the x, y coordinates with a\n   straight line."}, :name monet.canvas/line-to, :variadic false, :file "out/monet/canvas.cljs", :end-column 14, :method-params ([ctx x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ctx x y])), :doc "Connects the last point in the subpath to the x, y coordinates with a\n   straight line."}, draw-image {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 249, :column 7, :end-line 249, :end-column 17, :arglists (quote ([ctx img x y] [ctx img {:keys [x y w h sx sy sw sh dx dy dw dh], :as params}])), :doc "Draws the image onto the canvas at the given position.\n   If a map of params is given, the number of entries is used to\n   determine the underlying call to make.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([ctx img x y] [ctx img {:keys [x y w h sx sy sw sh dx dy dw dh], :as params}]), :arglists ([ctx img x y] [ctx img {:keys [x y w h sx sy sw sh dx dy dw dh], :as params}]), :arglists-meta (nil nil)}}, :name monet.canvas/draw-image, :variadic false, :file "out/monet/canvas.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([ctx img x y] [ctx img {:keys [x y w h sx sy sw sh dx dy dw dh], :as params}]), :arglists ([ctx img x y] [ctx img {:keys [x y w h sx sy sw sh dx dy dw dh], :as params}]), :arglists-meta (nil nil)}, :method-params ([ctx img x y] [ctx img {:keys [x y w h sx sy sw sh dx dy dw dh], :as params}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 249, :end-line 249, :max-fixed-arity 4, :fn-var true, :arglists ([ctx img x y] [ctx img {:keys [x y w h sx sy sw sh dx dy dw dh], :as params}]), :doc "Draws the image onto the canvas at the given position.\n   If a map of params is given, the number of entries is used to\n   determine the underlying call to make."}, get-context {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 15, :column 7, :end-line 15, :end-column 18, :arglists (quote ([canvas type]))}, :name monet.canvas/get-context, :variadic false, :file "out/monet/canvas.cljs", :end-column 18, :method-params ([canvas type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([canvas type]))}, save {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 33, :column 7, :end-line 33, :end-column 11, :arglists (quote ([ctx])), :doc "Saves the current drawing style state using a stack so you can revert\n   any change you make to it using restore."}, :name monet.canvas/save, :variadic false, :file "out/monet/canvas.cljs", :end-column 11, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx])), :doc "Saves the current drawing style state using a stack so you can revert\n   any change you make to it using restore."}, clear! {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 314, :column 7, :end-line 314, :end-column 13, :arglists (quote ([mc]))}, :name monet.canvas/clear!, :variadic false, :file "out/monet/canvas.cljs", :end-column 13, :method-params ([mc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mc]))}, two-pi {:name monet.canvas/two-pi, :file "out/monet/canvas.cljs", :line 126, :column 1, :end-line 126, :end-column 22, :private true, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 126, :column 16, :end-line 126, :end-column 22, :private true}}, stroke-rect {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 104, :column 7, :end-line 104, :end-column 18, :arglists (quote ([ctx {:keys [x y w h]}])), :doc "Paints a rectangle which has a starting point at (x, y) and has a\n   w width and an h height onto the canvas, using the current stroke\n   style."}, :name monet.canvas/stroke-rect, :variadic false, :file "out/monet/canvas.cljs", :end-column 18, :method-params ([ctx p__7283]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx {:keys [x y w h]}])), :doc "Paints a rectangle which has a starting point at (x, y) and has a\n   w width and an h height onto the canvas, using the current stroke\n   style."}, start-updating {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 373, :column 7, :end-line 373, :end-column 21, :arglists (quote ([mc]))}, :name monet.canvas/start-updating, :variadic false, :file "out/monet/canvas.cljs", :end-column 21, :method-params ([mc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 373, :end-line 373, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mc]))}, monet-canvas {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 355, :column 7, :end-line 355, :end-column 19, :arglists (quote ([elem context-type]))}, :name monet.canvas/monet-canvas, :variadic false, :file "out/monet/canvas.cljs", :end-column 19, :method-params ([elem context-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 355, :end-line 355, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem context-type]))}, stroke-cap {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 180, :column 7, :end-line 180, :end-column 17, :arglists (quote ([ctx cap])), :doc "Sets the line cap. Possible values (as string or keyword):\n   butt (default), round, square"}, :name monet.canvas/stroke-cap, :variadic false, :file "out/monet/canvas.cljs", :end-column 17, :method-params ([ctx cap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx cap])), :doc "Sets the line cap. Possible values (as string or keyword):\n   butt (default), round, square"}, stop {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 371, :column 7, :end-line 371, :end-column 11, :arglists (quote ([mc]))}, :name monet.canvas/stop, :variadic false, :file "out/monet/canvas.cljs", :end-column 11, :method-params ([mc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 371, :end-line 371, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mc]))}, stroke-width {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 174, :column 7, :end-line 174, :end-column 19, :arglists (quote ([ctx w])), :doc "Sets the line width. Default 1.0"}, :name monet.canvas/stroke-width, :variadic false, :file "out/monet/canvas.cljs", :end-column 19, :method-params ([ctx w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx w])), :doc "Sets the line width. Default 1.0"}, update-entity {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 309, :column 7, :end-line 309, :end-column 20, :arglists (quote ([mc k func & extra])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(mc k func extra)], :arglists ([mc k func & extra]), :arglists-meta (nil)}}, :name monet.canvas/update-entity, :variadic true, :file "out/monet/canvas.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(mc k func extra)], :arglists ([mc k func & extra]), :arglists-meta (nil)}, :method-params [(mc k func extra)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 309, :end-line 309, :max-fixed-arity 3, :fn-var true, :arglists ([mc k func & extra])}, ellipse {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 128, :column 7, :end-line 128, :end-column 14, :arglists (quote ([ctx {:keys [x y rw rh]}])), :doc "Draws an ellipse at position (x, y) with radius (rw, rh)"}, :name monet.canvas/ellipse, :variadic false, :file "out/monet/canvas.cljs", :end-column 14, :method-params ([ctx p__7298]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx {:keys [x y rw rh]}])), :doc "Draws an ellipse at position (x, y) with radius (rw, rh)"}, fill-style {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 162, :column 7, :end-line 162, :end-column 17, :arglists (quote ([ctx color])), :doc "Color or style to use inside shapes. Default #000 (black)."}, :name monet.canvas/fill-style, :variadic false, :file "out/monet/canvas.cljs", :end-column 17, :method-params ([ctx color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx color])), :doc "Color or style to use inside shapes. Default #000 (black)."}, get-pixel {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 240, :column 7, :end-line 240, :end-column 16, :arglists (quote ([ctx x y])), :doc "Gets the pixel value as a hash map of RGBA values"}, :name monet.canvas/get-pixel, :variadic false, :file "out/monet/canvas.cljs", :end-column 16, :method-params ([ctx x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ctx x y])), :doc "Gets the pixel value as a hash map of RGBA values"}, rotate {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 47, :column 7, :end-line 47, :end-column 13, :arglists (quote ([ctx angle])), :doc "Rotate the context "}, :name monet.canvas/rotate, :variadic false, :file "out/monet/canvas.cljs", :end-column 13, :method-params ([ctx angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx angle])), :doc "Rotate the context "}, alpha {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 207, :column 7, :end-line 207, :end-column 12, :arglists (quote ([ctx a])), :doc "Global Alpha value that is applied to shapes and images before they are\n   composited onto the canvas. Default 1.0 (opaque)."}, :name monet.canvas/alpha, :variadic false, :file "out/monet/canvas.cljs", :end-column 12, :method-params ([ctx a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx a])), :doc "Global Alpha value that is applied to shapes and images before they are\n   composited onto the canvas. Default 1.0 (opaque)."}, translate {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 59, :column 7, :end-line 59, :end-column 16, :arglists (quote ([ctx x y])), :doc "Moves the origin point of the context to (x, y)."}, :name monet.canvas/translate, :variadic false, :file "out/monet/canvas.cljs", :end-column 16, :method-params ([ctx x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ctx x y])), :doc "Moves the origin point of the context to (x, y)."}, get-entity {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 306, :column 7, :end-line 306, :end-column 17, :arglists (quote ([mc k]))}, :name monet.canvas/get-entity, :variadic false, :file "out/monet/canvas.cljs", :end-column 17, :method-params ([mc k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 306, :end-line 306, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mc k]))}, fill-rect {:protocol-inline nil, :meta {:file "/Users/niko/Dropbox/clojure-on-the-go/CLJ-BOOK/chapter05-niko/samples-clojurescript/cljs-three/out/monet/canvas.cljs", :line 112, :column 7, :end-line 112, :end-column 16, :arglists (quote ([ctx {:keys [x y w h]}])), :doc "Draws a filled rectangle at (x, y) position whose size is determined\n   by width w and height h."}, :name monet.canvas/fill-rect, :variadic false, :file "out/monet/canvas.cljs", :end-column 16, :method-params ([ctx p__7288]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx {:keys [x y w h]}])), :doc "Draws a filled rectangle at (x, y) position whose size is determined\n   by width w and height h."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :rh :m21 :m12 :rw :r :dh :dx :else :w :sy :value :green :dy :entities :cpx :update :m11 :updating? :cpy :canvas :cp1x :start-angle :cp2x :h :active :red :blue :counter-clockwise? :cp1y :alpha :dw :sx :x :last-frame-time :sh :sw :cp2y :draw :ctx :end-angle :m22 :text}, :order [:m11 :m12 :m21 :m22 :dx :dy :x :y :w :h :r :start-angle :end-angle :counter-clockwise? :rw :rh :text :red :green :blue :alpha :sh :sw :dh :sy :dw :sx :cpx :cpy :cp1x :cp1y :cp2x :cp2y :entities :value :draw :update :canvas :updating? :ctx :active :last-frame-time :else]}, :doc "The canvas namespace provides functions which can be used for\n   rendering graphs, game graphics, art, or othe visual images\n   on the fly.\n\n   See http://www.w3.org/TR/html5/scripting-1.html#the-canvas-element and\n   http://www.w3.org/TR/2dcontext/"}