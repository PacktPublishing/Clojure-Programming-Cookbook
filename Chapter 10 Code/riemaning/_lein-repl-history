(require '[riemann.client :as r])
(def c (r/tcp-client {:host "192.168.100.103"}))
(-> c (r/send-event {:service "foo" :state "ok"})
      (deref 5000 ::timeout))
@(r/query c "state = \"ok\"")
sudo service riemann reload
(require '[riemann.client :as r])
(def c (r/tcp-client {:host "192.168.100.103"}))
(-> c (r/send-event {:service "foo" :state "ok"})
      (deref 5000 ::timeout))
@(r/query c "state = \"ok\"")
(def c (r/tcp-client {:host "192.168.100.103"}))
(-> c (r/send-event {:service "foo" :state "ok"})
      (deref 5000 ::timeout))
      (deref 5000 ::timeout))(-> c (r/send-event {:service "foo" :state "ok"})
      (deref 5000 ::timeout))
(-> c (r/send-event {:service "foo" :state "ok"})
      (deref 5000 ::timeout))
(def c (r/tcp-client {:host "192.168.100.103"}))
(-> c (r/send-event {:service "foo" :state "ok"})
      (deref 5000 ::timeout))
(-> c (r/send-event {:service "foo" :state "ok"})
      (deref 5000 ::timeout))
(def c (r/tcp-client {:host "192.168.100.103"}))
(-> c (r/send-event {:service "foo" :state "ok"})
      (deref 5000 ::timeout))
(ns riemaning.core)
(require '[riemann.client :as r])
(def c (r/tcp-client {:host "192.168.100.103"}))
(-> c (r/send-event {:service "foo" :state "ok"})
      (deref 5000 ::timeout))
@(r/query c "state = \"ok\"")
(-> c (r/send-event {:service "foo" :state "ok"})
      (deref 5000 ::timeout))
 (r/send-event {:service "foo" :state "ok"}) 
 (r/send-event c {:service "foo" :state "ok"}) 
@(r/query c "state = \"ok\"")
(clojure.pprint/pprint @(r/query c "state = \"ok\""))
@(r/query c "service = \"foo\"")
@(r/query c "service = foo")
@(r/query c "service = \"foo\"")
 (r/send-event c {:service "nico" :state "ok"}) 
@(r/query c "service = \"nico\"")
(clojure.pprint/pprint @(r/query c "state = \"ok\""))
 (r/send-event c {:service "nico" :state "ok" :message "doing good"}) 
@(r/query c "service = \"nico\"")
 (r/send-event c {:service "nico" :state "ok" :message "doing good"}) 
@(r/query c "state = \"ok\"")
 (r/send-event c {:service "nico" :state "ok" :message "doing good"}) 
 (r/send-event c {:service "nico" :state "ok" :message "doing good" :value 3}) 
 (r/send-event c {:service "nico" :state "ok" :message "doing good" :value 2}) 
 (r/send-event c {:service "nico" :state "ok" :message "doing good" :value 10}) 
 (r/send-event c {:service "niko" :state "ok" :message "doing good" :value 10}) 
 (r/send-event c {:service "niko" :state "ok" :message "doing good" :metric 10}) 
 (r/send-event c {:service "niko" :state "ok" :message "doing good" :metric 1}) 
 (r/send-event c {:service "niko" :state "ok" :message "doing good" :metric 2}) 
 (r/send-event c {:service "niko" :state "ok" :message "doing good" :metric 3}) 
 (r/send-event c {:service "niko" :state "ok" :message "doing good" :metric 4}) 
(r/send-event c {:service "niko" :state "ok" :message "doing good" :metric 10}) 
(r/send-event c {:service "niko" :state "ok" :message "doing good" :metric 100}) 
(r/send-event c {:service "niko" :state "ok" :message "doing good" :metric 50}) 
(r/send-event c {:service "niko" :state "ok" :metric 30}) 
(r/send-event c {:service "niko" :state "ok" :metric 100}) 
(import '[com.jezhumble.javasysmon JavaSysMon])
(def mon (JavaSysMon.))
(.cpuFrequencyInHz mon)
(.cpuTimes mon)
(first (.cpuTimes mon))
(.getUserMillis (.cpuTimes mon))
(first (.ProcessInfo mon))
(first (.processTable mon))
(.cpuTimes mon)
(first (.cpuTimes mon))
(def a (.cpuTimes mon)))
(def a (.cpuTimes mon))
(.getCpuUsage (.cpuTimes mon) a)
(require '[riemann.client :as r])
(def c (r/tcp-client {:host "192.168.100.103"}))
(-> c (r/send-event {:service "foo" :state "ok"})
      (deref 5000 ::timeout))
@(r/query c "state = \"ok\"")
(require '[riemann.client :as r])
(def c (r/tcp-client {:host "192.168.1.9"}))
(-> c (r/send-event {:service "foo" :state "ok"})
      (deref 5000 ::timeout))
@(r/query c "state = \"ok\"")
(-> c (r/send-event {:service "nico" :metrics 2 :state "ok"})
)
(-> c (r/send-event {:service "nico" :metrics 20 :state "ok"}))
(-> c (r/send-event {:service "nico" :metric 20 :state "ok"}))
(-> c (r/send-event {:service "nico" :metric 200 :state "ok"}))
(-> c (r/send-event {:service "nico" :metric 100 :state "ok"}))
(-> c (r/send-event {:service "nico" :metric 150 :state "ok"}))
(import '[com.ullink.slack.simpleslackapi SlackSession])
(import '[com.ullink.slack.simpleslackapi.impl SlackSessionFactory])
(def token "xoxb-64790720018-RhD3YOsLWJ4yc13GlX0CDeQe")
(def factory (SlackSessionFactory/createWebSocketSlackSession token))
(def c (.connect factory))
(use 'slack-rtm.core)
;; connect to the Real Time Messaging API
(def token "xoxb-64790720018-RhD3YOsLWJ4yc13GlX0CDeQe")
(def rtm-conn (connect "your-token"))
(def token "xoxb-64790720018-RhD3YOsLWJ4yc13GlX0CDeQe")
(def rtm-conn (connect token))
(def events-publication (:events-publication rtm-conn))
(def token "xoxb-64790720018-RhD3YOsLWJ4yc13GlX0CDeQe")
(defn rcv-msg[evt]
(spit "evt.log" evt :append true)
)
(def rtm-conn (connect token :on-receive rcv-msg))
(use 'slack-rtm.core)
(def rtm-conn (connect token :on-receive rcv-msg))
(use 'slack-rtm.core)
(use '[cheshire.core :refer :all])
;; connect to the Real Time Messaging API
(def token "xoxb-64790720018-RhD3YOsLWJ4yc13GlX0CDeQe")
(defn rcv-msg[evt]
; (spit "evt.log" evt :append true)
(spit "evt.msg" (:message (parse-string evt)) :append true)
)
(def rtm-conn (connect token :on-receive rcv-msg))
(use 'slack-rtm.core)
(use '[cheshire.core :refer :all])
(use 'slack-rtm.core)
(use '[cheshire.core :refer :all])
;; connect to the Real Time Messaging API
(def token "xoxb-64790720018-RhD3YOsLWJ4yc13GlX0CDeQe")
(defn rcv-msg[evt]
; (spit "evt.log" evt :append true)
(parse-string evt 
)
(def rtm-conn (connect token :on-receive rcv-msg))
(defn rcv-msg[evt]
(spit "evt.log" (parse-string evt) :append true)
)
(def rtm-conn (connect token :on-receive rcv-msg))
(defn rcv-msg[evt]
(spit "evt.log" (:message evt) :append true)
)
(def rtm-conn (connect token :on-receive rcv-msg))
(use 'slack-rtm.core)
; (use '[cheshire.core :refer :all])
;; connect to the Real Time Messaging API
(def token "xoxb-64790720018-RhD3YOsLWJ4yc13GlX0CDeQe")
(defn rcv-msg[evt]
(spit "evt.log" (:message evt) :append true)
)
(def rtm-conn (connect token :on-receive rcv-msg))
(use 'slack-rtm.core)
;; connect to the Real Time Messaging API
(def token "xoxb-64790720018-RhD3YOsLWJ4yc13GlX0CDeQe")
(defn rcv-msg[evt]
(spit "evt.log" (get (:message evt) "text") :append true)
)
(def rtm-conn (connect token :on-receive rcv-msg))
(use 'slack-rtm.core)
;; connect to the Real Time Messaging API
(def token "xoxb-64790720018-RhD3YOsLWJ4yc13GlX0CDeQe")
(defn rcv-msg[evt]
(spit "evt.log" (:message evt) :append true)
)
(def rtm-conn (connect token :on-receive rcv-msg))
(use 'slack-rtm.core)
(require '[riemann.client :as r])
; example 2
(def c (r/tcp-client {:host "192.168.1.9"}))
@(r/query c "state = \"ok\"")
(def token "xoxb-64790720018-RhD3YOsLWJ4yc13GlX0CDeQe")
(defn rcv-msg[evt]
(-> c (r/send-event (:message evt)
      (deref 5000 ::timeout))
))
(def rtm-conn (connect token :on-receive rcv-msg))
(defn rcv-msg[evt]
(-> c (r/send-event (:message evt)))
)
(def rtm-conn (connect token :on-receive rcv-msg))
(use 'slack-rtm.core)
(require '[riemann.client :as r])
; example 2
(def c (atom (r/tcp-client {:host "192.168.1.9"})))
; @(r/query c "state = \"ok\"")
(def token "xoxb-64790720018-RhD3YOsLWJ4yc13GlX0CDeQe")
(defn rcv-msg[evt]
(-> @c (r/send-event (:message evt)))
)
(def rtm-conn (connect token :on-receive rcv-msg))
(defn rcv-msg[evt]
(-> @c (r/send-event (merge {service "slack"} (:message evt))))
)
(defn rcv-msg[evt]
(-> @c (r/send-event (merge {:service "slack"} (:message evt))))
)
(use 'slack-rtm.core)
(require '[riemann.client :as r])
; example 2
(def c (atom (r/tcp-client {:host "192.168.1.9"})))
; @(r/query c "state = \"ok\"")
(def token "xoxb-64790720018-RhD3YOsLWJ4yc13GlX0CDeQe")
(defn rcv-msg[evt]
(-> @c (r/send-event (merge {:service "slack"} (:message evt))))
)
(def rtm-conn (connect token :on-receive rcv-msg))
(defn rcv-msg[evt]
(-> @c (r/send-event (merge {:service "slack"} (read-string (:message evt)))))
)
(def rtm-conn (connect token :on-receive rcv-msg))
(use 'slack-rtm.core)
(require '[riemann.client :as r])
; example 2
(def c (atom (r/tcp-client {:host "192.168.1.9"})))
; @(r/query c "state = \"ok\"")
(def token "xoxb-64790720018-RhD3YOsLWJ4yc13GlX0CDeQe")
(defn rcv-msg[evt]
(-> @c (r/send-event (merge {:service "slack"} (read-string (:message evt)))))
)
(def rtm-conn (connect token :on-receive rcv-msg))
(use 'slack-rtm.core)
(require '[riemann.client :as r])
; example 2
(def c (atom (r/tcp-client {:host "192.168.1.9"})))
; @(r/query c "state = \"ok\"")
(def token "xoxb-64790720018-RhD3YOsLWJ4yc13GlX0CDeQe")
(defn rcv-msg[evt]
(-> @c (r/send-event {:service "slack" :message (:message evt)})))
(def rtm-conn (connect token :on-receive rcv-msg))
(defn rcv-msg[evt]
(-> @c (r/send-event {:service "slack" :description (:message evt)})))
(use 'slack-rtm.core)
(require '[riemann.client :as r])
; slack to  riemann
(def c (atom (r/tcp-client {:host "192.168.1.9"})))
(def token "xoxb-64790720018-RhD3YOsLWJ4yc13GlX0CDeQe")
(defn rcv-msg[evt]
(-> @c (r/send-event {:service "slack" :description (:message evt)})))
(def rtm-conn (connect token :on-receive rcv-msg))
(-> c (r/send-event {:service "foo" :state "ok"})
(-> @c (r/send-event {:service "foo" :state "ok"}))
)
(r/send-event @c {:service "foo" :state "ok"}))
(r/send-event @c {:service "foo" :state "ok"})
(r/send-event @c {:service "nico" :state "ok"})
