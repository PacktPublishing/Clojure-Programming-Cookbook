(use 'dk.ative.docjure.spreadsheet)
(->> (load-workbook "fixtures/data.xslx")
     (select-sheet "Price List")
     (select-columns {:A :name, :B :price}))
(->> (load-workbook "fixtures/data.xlsx")
     (select-sheet "Price List")
     (select-columns {:A :name, :B :price}))
(->> (load-workbook "fixtures/data.xlsx")
     (select-sheet "Price List")
     (select-columns {:A :name, :B :price}))
(rest 
  (->> (load-workbook "fixtures/data.xlsx")
     (select-sheet "Price List")
     (select-columns {:A :name, :B :price})))
(map 
  #(:price %)
  (rest 
  (->> (load-workbook "fixtures/data.xlsx")
     (select-sheet "Price List")
     (select-columns {:A :name, :B :price})))
)
map 
  #(:price %)
  (rest 
  (->> (load-workbook "fixtures/data.xlsx")
     (select-sheet "Price List")
     (select-columns {:A :name, :B :price}))))
(map 
  #(:price %)
  (rest 
  (->> (load-workbook "fixtures/data.xlsx")
     (select-sheet "Price List")
     (select-columns {:A :name, :B :price})))
)
(map 
  #(:price %)
  (rest 
  (->> (load-workbook "fixtures/data.xlsx")
     (select-sheet "Price List")
     (select-columns {:A :name, :B :price}))))
(clojure.lang.RT/loadLibrary org.opencv.core.Core/NATIVE_LIBRARY_NAME)
(org.opencv.core.Point. 0 0)
(import '[org.opencv.core Mat CvType Scalar]) 
(import '[org.opencv.core Mat CvType Scalar])
(def m (Mat. 5 10 CvType/CV_8UC1 (Scalar. 0 0)))
(def mr1 (.row m 1))
(.setTo mr1 (Scalar. 1 0))
(def mc5 (.col m 5))
(.setTo mc5 (Scalar. 5 0))
(println (.dump m))
(import '[org.opencv.core Mat Size CvType]
               '[org.opencv.highgui Highgui]
               '[org.opencv.imgproc Imgproc])
(def lena (Highgui/imread "fixtures/lena.png"))
(def blurred (Mat. 512 512 CvType/CV_8UC3))
(Imgproc/GaussianBlur lena blurred (Size. 5 5) 3 3)
(Highgui/imwrite "resources/images/blurred.png" blurred)
(Highgui/imwrite "target/blurred.png" blurred)
(import '[
org.opencv.core Core Mat MatOfRect Point Rect Scalar Highgui CascadeClassifier])
(def faceDetector (CascadeClassifier. "opencv-data/lbpcascade_frontalface.xml"))
(def image (Highgui/imread "fixtures/lena.png"))
(def faceDetections (MatOfRect.))
(.detectMultiScale faceDetector image faceDetections)
(println "Detected " (-> faceDetections (.toArray) (.length)) " faces")
(import '[org.opencv.core Core Mat MatOfRect Point Rect Scalar Highgui CascadeClassifier])
(import '[org.opencv.objdetect CascadeClassifier])
(def faceDetector (CascadeClassifier. "opencv-data/lbpcascade_frontalface.xml"))
(def image (Highgui/imread "fixtures/lena.png"))
(def faceDetections (MatOfRect.))
(.detectMultiScale faceDetector image faceDetections)
(println "Detected " (-> faceDetections (.toArray) (.length)) " faces")
(println "Detected " (.length (.toArray faceDetections) " faces"))
(println "Detected " (size (.toArray faceDetections) " faces"))
(.toArray faceDetections)
(.length (.toArray faceDetections))
(.-length (.toArray faceDetections))
(println faceDetections)
(doseq [rect rect-array]
(Core/rectangle image (Point. rect.-x rect.-y) (Point. (+ rect.-x rect.width) (+ rect.-y rect.height)) (Scalar. 0 255 0))
)
(def rect-array (.toArray faceDetections))
(doseq [rect rect-array]
(Core/rectangle image (Point. rect.-x rect.-y) (Point. (+ rect.-x rect.width) (+ rect.-y rect.height)) (Scalar. 0 255 0))
)
(doseq [^Rect rect rect-array]
(Core/rectangle image (Point. rect.-x rect.-y) (Point. (+ rect.-x rect.width) (+ rect.-y rect.height)) (Scalar. 0 255 0))
)
(doseq [^Rect rect rect-array]
(Core/rectangle image (Point. (.-x rect) (.-y rect)) (Point. (+ (.-x rect) (.width rect)) (+ (.-y rect) (.height rect))) (Scalar. 0 255 0))
)
(Highgui/imwrite "target/detection.png" blurred) 
image
(Highgui/imwrite "target/detection.png" image)
(def frame (Mat.))
(def camera (org.opencv.highgui.VideoCapture.)) ; "~/Desktop/motion.mp4"))
(javax.swing.JFrame. "Hello")
(def jframe (javax.swing.JFrame. "Hello"))
(.setDefaultCloseOperation (javax.swing.JFrame$EXIT_ON_CLOSE))
(def vidpanel (javax.swing.JLabel.))
(.setDefaultCloseOperation (javax.swing.JFrame/EXIT_ON_CLOSE))
(.setDefaultCloseOperation (. javax.swing.JFrame EXIT_ON_CLOSE))
(.setDefaultCloseOperation jframe (javax.swing.JFrame/EXIT_ON_CLOSE))
(.setContentPane jframe vidpanel)
((.setVisible jframe true)
)
(.setVisible jframe true)
(.add vidpanel camera)
(.setSize jframe 300 300)
(.add jframe camera)
